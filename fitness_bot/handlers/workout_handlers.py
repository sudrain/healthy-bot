import asyncpg
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from database.crud import (
    create_cardio_session,
    create_strength_session,
    create_user,
    create_workout,
)
from keyboards import keyboards
from states import WorkoutForm

workout_router = Router()


# -------------------------------
#    –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
# -------------------------------


async def cancel_operation(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove()
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboards.main_menu())


@workout_router.message(F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    await cancel_operation(message, state)


# -----------------------------------
#   –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# -----------------------------------


@workout_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def start_workout(message: types.Message, state: FSMContext):
    await state.set_state(WorkoutForm.select_workout_type)
    markup = await keyboards.get_type_exercises()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=markup)


# -----------------------------------
#    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ä–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# -----------------------------------
@workout_router.message(WorkoutForm.select_workout_type, F.text == "–ö–∞—Ä–¥–∏–æ")
async def select_cardio_exercise(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    await state.update_data(workout_type="cardio")
    markup = await keyboards.get_cardio_exercises(pool)
    await message.answer("üèÉ –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=markup)
    await state.set_state(WorkoutForm.select_cardio_exercise)


@workout_router.message(WorkoutForm.select_cardio_exercise)
async def process_cardio_exercise(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    async with pool.acquire() as conn:
        exercise = await conn.fetchrow(
            "SELECT id FROM exercise_types WHERE name = $1 AND category = 'cardio'", message.text
        )

    if not exercise:
        await message.answer("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    await state.update_data(exercise_id=exercise["id"])
    await message.answer(
        "‚è± –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã):", reply_markup=keyboards.cancel_button()
    )
    await state.set_state(WorkoutForm.cardio_duration)


@workout_router.message(WorkoutForm.cardio_duration)
async def process_cardio_duration(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç!")
        return

    await state.update_data(duration=int(message.text))
    await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º):", reply_markup=keyboards.cancel_button())
    await state.set_state(WorkoutForm.cardio_distance)


@workout_router.message(WorkoutForm.cardio_distance)
async def process_cardio_distance(message: types.Message, state: FSMContext):
    try:
        distance = float(message.text.replace(",", "."))
        if distance <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ü—Ä–∏–º–µ—Ä: 5.3")
        return

    await state.update_data(distance=distance)
    await message.answer("üìà –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å:", reply_markup=keyboards.speed_keyboard())
    await state.set_state(WorkoutForm.cardio_avg_speed)


@workout_router.message(WorkoutForm.cardio_avg_speed)
async def process_cardio_speed(message: types.Message, state: FSMContext):
    try:
        speed = float(message.text.replace(",", "."))
        if speed < 0 or speed > 30:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ü—Ä–∏–º–µ—Ä: 9.5")
        return

    await state.update_data(avg_speed=speed)
    await message.answer("‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å:", reply_markup=keyboards.cancel_button())
    await state.set_state(WorkoutForm.cardio_heart_rate)


@workout_router.message(WorkoutForm.cardio_heart_rate)
async def process_cardio_heart_rate(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —É–¥–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É!")
        return

    await state.update_data(avg_heart_rate=int(message.text))
    await message.answer(
        "‚è≥ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–º–∏–Ω—É—Ç—ã):", reply_markup=keyboards.cancel_button()
    )
    await state.set_state(WorkoutForm.cardio_rest)


# ------------------------------------
#    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# ------------------------------------


@workout_router.message(WorkoutForm.select_workout_type, F.text == "–°–∏–ª–æ–≤–∞—è")
async def select_strength_exercise(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    await state.update_data(workout_type="strength")
    markup = await keyboards.get_strength_exercises(pool)
    await message.answer("üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=markup)
    await state.set_state(WorkoutForm.select_strength_exercise)


@workout_router.message(WorkoutForm.select_strength_exercise)
async def process_strength_exercise(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    async with pool.acquire() as conn:
        exercise = await conn.fetchrow(
            "SELECT id FROM exercise_types WHERE name = $1 AND category = 'strength'", message.text
        )

    if not exercise:
        await message.answer("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    await state.update_data(exercise_id=exercise["id"])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:", reply_markup=keyboards.cancel_button())
    await state.set_state(WorkoutForm.strength_reps)


@workout_router.message(WorkoutForm.strength_reps)
async def process_strength_reps(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π!")
        return

    await state.update_data(reps=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–≤ –∫–≥):", reply_markup=keyboards.cancel_button())
    await state.set_state(WorkoutForm.strength_weight)


@workout_router.message(WorkoutForm.strength_weight)
async def process_strength_weight(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ —á–∏—Å–ª–æ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏!")
        return

    await state.update_data(weight=float(message.text))
    await message.answer(
        "‚è≥ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–º–∏–Ω—É—Ç—ã):", reply_markup=keyboards.cancel_button()
    )
    await state.set_state(WorkoutForm.strength_rest)


# ----------------------------------------
#    –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–¥—ã—Ö–∞(–ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å)
# ----------------------------------------
@workout_router.message(WorkoutForm.cardio_rest)
@workout_router.message(WorkoutForm.strength_rest)
async def process_rest_time(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    data = await state.get_data()
    await state.update_data(rest_time=int(message.text))

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –ë–î
    async with pool.acquire() as conn:
        exercise_name = await conn.fetchval(
            "SELECT name FROM exercise_types WHERE id = $1", data["exercise_id"]
        )

    await state.update_data(exercise_name=exercise_name)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
        ]
    )

    formatted_data = await format_workout_data(await state.get_data())
    await message.answer(formatted_data, reply_markup=confirm_keyboard)
    await state.set_state(WorkoutForm.confirm_data)


@workout_router.callback_query(WorkoutForm.confirm_data, F.data.in_(["confirm", "cancel"]))
async def handle_confirmation(callback: types.CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    try:
        if callback.data == "confirm":
            data = await state.get_data()

            async with pool.acquire() as conn:
                async with conn.transaction():  # –û–±—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await create_user(conn, callback.from_user)

                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                    workout_id = await create_workout(
                        conn=conn, user_id=callback.from_user.id, workout_type=data["workout_type"]
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
                    if data["workout_type"] == "cardio":
                        await create_cardio_session(
                            conn=conn,
                            workout_id=workout_id,
                            exercise_id=data["exercise_id"],
                            duration=data["duration"],
                            distance=data["distance"],
                            avg_speed=data["avg_speed"],
                            heart_rate=data["avg_heart_rate"],
                            rest_time=data["rest_time"],  # –ë—Ä–∞—Ç—å –∏–∑ data, –∞ –Ω–µ message.text
                        )
                    else:
                        await create_strength_session(  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ strength
                            conn=conn,
                            workout_id=workout_id,
                            exercise_id=data["exercise_id"],
                            reps=data["reps"],
                            weight=data["weight"],
                            rest_time=data["rest_time"],
                        )

            await callback.message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            await callback.message.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    except Exception as e:
        # logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await callback.message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.({e})")

    finally:
        await state.clear()
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboards.main_menu())
        await callback.answer()


async def format_workout_data(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    if data["workout_type"] == "cardio":
        return (
            "üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
            f"üèÉ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {data['exercise_name']}\n"
            f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} –º–∏–Ω\n"
            f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {data['distance']} –∫–º\n"
            f"üìà –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {data['avg_speed']} –∫–º/—á\n"
            f"‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å: {data['avg_heart_rate']} —É–¥/–º–∏–Ω\n"
            f"‚è≥ –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞: {data['rest_time']} –º–∏–Ω"
        )
    else:
        return (
            "üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
            f"üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {data['exercise_name']}\n"
            f"üî¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {data['reps']}\n"
            f"üèãÔ∏è –í–µ—Å: {data['weight']} –∫–≥\n"
            f"‚è≥ –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞: {data['rest_time']} –º–∏–Ω"
        )
