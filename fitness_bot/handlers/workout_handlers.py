import asyncpg
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

# from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from database.crud import (
    create_cardio_session,
    create_strength_session,
    create_user,
    create_workout,
)
from keyboards import keyboards
from states import WorkoutForm

workout_router = Router()


# -------------------------------
#    –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -------------------------------


async def delete_previous_keyboard(callback: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    try:
        await callback.message.delete()
    except Exception:
        pass


async def format_exercise_data(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if data["workout_type"] == "cardio":
        return (
            "üèÉ –ö–∞—Ä–¥–∏–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n"
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['exercise_name']}\n"
            f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data.get('duration', 0)} –º–∏–Ω\n"
            f"‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {data.get('distance', 0)} –∫–º\n"
            f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {data.get('speed', 0)} –∫–º/—á\n"
            f"‚Ä¢ –ü—É–ª—å—Å: {data.get('heart_rate', 0)} —É–¥/–º–∏–Ω"
        )
    else:
        return (
            "üèãÔ∏è –°–∏–ª–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n"
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['exercise_name']}\n"
            f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {data.get('reps', 0)}\n"
            f"‚Ä¢ –í–µ—Å: {data.get('weight', 0)} –∫–≥\n"
            f"‚Ä¢ –ü–æ–¥—Ö–æ–¥—ã: {data.get('sets', 0)}"
        )


# -------------------------------
#    –ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# -------------------------------


@workout_router.callback_query(F.data == "add_workout")
async def start_workout(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_keyboard(callback)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=await keyboards.get_workout_type_kb()
    )
    await state.set_state(WorkoutForm.select_workout_type)
    await callback.answer()


# -------------------------------
#    –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# -------------------------------


@workout_router.callback_query(WorkoutForm.select_workout_type, F.data.startswith("workout_type:"))
async def select_workout_type(callback: types.CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    workout_type = callback.data.split(":")[1]
    await state.update_data(workout_type=workout_type, exercises=[])

    await delete_previous_keyboard(callback)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=await keyboards.get_exercises_kb(pool, workout_type)
    )
    await state.set_state(WorkoutForm.select_exercise)
    await callback.answer()


# -------------------------------
#    –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
# -------------------------------


@workout_router.callback_query(WorkoutForm.select_exercise, F.data.startswith("exercise:"))
async def select_exercise(callback: types.CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    exercise_id = int(callback.data.split(":")[1])
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    async with pool.acquire() as conn:
        exercise_name = await conn.fetchval(
            "SELECT name FROM exercise_types WHERE id = $1", exercise_id
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    current_exercise = {"id": exercise_id, "name": exercise_name, "params": {}}
    await state.update_data(current_exercise=current_exercise, current_param=None, param_value=0)

    await delete_previous_keyboard(callback)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if data["workout_type"] == "cardio":
        param_name = "duration"
        text = "‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω):"
    else:
        param_name = "sets"
        text = "üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:"

    await state.update_data(current_param=param_name)
    await callback.message.answer(text, reply_markup=keyboards.get_number_input_kb(param_name))
    await state.set_state(WorkoutForm.enter_params)
    await callback.answer()


# -------------------------------
#    –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# -------------------------------


@workout_router.callback_query(WorkoutForm.enter_params, F.data.startswith("adjust:"))
async def adjust_parameter(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    _, param_name, delta = callback.data.split(":")
    delta = int(delta)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    new_value = max(0, data["param_value"] + delta)
    await state.update_data(param_value=new_value)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    await callback.message.edit_reply_markup(
        reply_markup=keyboards.get_number_input_kb(param_name, new_value)
    )
    await callback.answer()


@workout_router.callback_query(WorkoutForm.enter_params, F.data.startswith("confirm_value:"))
async def confirm_parameter(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    param_name = callback.data.split(":")[1]
    param_value = data["param_value"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Ç–µ–∫—É—â–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏
    current_exercise = data["current_exercise"]
    current_exercise["params"][param_name] = param_value
    await state.update_data(current_exercise=current_exercise)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    next_param = None
    if data["workout_type"] == "cardio":
        params_order = ["duration", "distance", "speed", "heart_rate"]
    else:
        params_order = ["sets", "reps", "weight"]

    current_index = params_order.index(param_name)
    if current_index < len(params_order) - 1:
        next_param = params_order[current_index + 1]

    await delete_previous_keyboard(callback)

    if next_param:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
        await state.update_data(current_param=next_param, param_value=0)

        param_texts = {
            "duration": "‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω):",
            "distance": "üìè –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º):",
            "speed": "üìà –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á):",
            "heart_rate": "‚ù§Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å (—É–¥/–º–∏–Ω):",
            "sets": "üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:",
            "reps": "üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:",
            "weight": "üèãÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–µ—Å (–∫–≥):",
        }

        await callback.message.answer(
            param_texts[next_param], reply_markup=keyboards.get_number_input_kb(next_param)
        )
    else:
        # –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        exercise_text = await format_exercise_data(
            {
                **current_exercise["params"],
                "exercise_name": current_exercise["name"],
                "workout_type": data["workout_type"],
            }
        )

        await callback.message.answer(
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n\n{exercise_text}",
            reply_markup=keyboards.get_confirmation_kb(),
        )
        await state.set_state(WorkoutForm.confirm_exercise)

    await callback.answer()


# -------------------------------
#    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
# -------------------------------


@workout_router.callback_query(WorkoutForm.confirm_exercise, F.data == "confirm_exercise")
async def confirm_exercise(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
    exercises = data["exercises"]
    exercises.append(data["current_exercise"])
    await state.update_data(exercises=exercises)

    await delete_previous_keyboard(callback)
    await callback.message.answer(
        "‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=keyboards.get_add_another_kb()
    )
    await state.set_state(WorkoutForm.add_another)
    await callback.answer()


@workout_router.callback_query(WorkoutForm.confirm_exercise, F.data == "edit_exercise")
async def edit_exercise(callback: types.CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    data = await state.get_data()
    workout_type = data["workout_type"]

    await delete_previous_keyboard(callback)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=await keyboards.get_exercises_kb(pool, workout_type)
    )
    await state.set_state(WorkoutForm.select_exercise)
    await callback.answer()


# -------------------------------
#    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
# -------------------------------


@workout_router.callback_query(WorkoutForm.add_another, F.data == "add_another")
async def add_another_exercise(
    callback: types.CallbackQuery, state: FSMContext, pool: asyncpg.Pool
):
    data = await state.get_data()

    await delete_previous_keyboard(callback)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:",
        reply_markup=await keyboards.get_exercises_kb(pool, data["workout_type"]),
    )
    await state.set_state(WorkoutForm.select_exercise)
    await callback.answer()


@workout_router.callback_query(WorkoutForm.add_another, F.data == "finish_workout")
async def finish_workout(callback: types.CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    data = await state.get_data()
    user = callback.from_user

    try:
        async with pool.acquire() as conn:
            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await create_user(conn, user)

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            workout_id = await create_workout(
                conn=conn, user_id=user.id, workout_type=data["workout_type"]
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            for exercise in data["exercises"]:
                params = exercise["params"]

                if data["workout_type"] == "cardio":
                    await create_cardio_session(
                        conn=conn,
                        workout_id=workout_id,
                        exercise_id=exercise["id"],
                        duration=params.get("duration", 0),
                        distance=params.get("distance", 0),
                        avg_speed=params.get("speed", 0),
                        heart_rate=params.get("heart_rate", 0),
                    )
                else:
                    await create_strength_session(
                        conn=conn,
                        workout_id=workout_id,
                        exercise_id=exercise["id"],
                        sets=params.get("sets", 0),
                        reps=params.get("reps", 0),
                        weight=params.get("weight", 0),
                    )

        await delete_previous_keyboard(callback)
        await callback.message.answer("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

    finally:
        await state.clear()
        await callback.answer()


# -------------------------------
#    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
# -------------------------------


@workout_router.callback_query(F.data == "cancel")
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_keyboard(callback)
    await callback.message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await callback.answer()
