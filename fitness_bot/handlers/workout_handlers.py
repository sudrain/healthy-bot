import asyncpg
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from database.crud import (
    create_cardio_session,
    create_strength_session,
    create_user,
    create_workout,
)
from keyboards import keyboards
from states import WorkoutForm

workout_router = Router()


# -------------------------------
#    –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
# -------------------------------


async def cancel_operation(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove()
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboards.main_menu())


@workout_router.message(F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    await cancel_operation(message, state)


# -----------------------------------
#   –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# -----------------------------------


@workout_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def start_workout(message: types.Message, state: FSMContext):
    await state.set_state(WorkoutForm.select_workout_type)
    markup = await keyboards.get_type_exercises()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=markup)


# -----------------------------------
#    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ä–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# -----------------------------------
@workout_router.message(WorkoutForm.select_workout_type, F.text == "–ö–∞—Ä–¥–∏–æ")
async def select_cardio_exercise(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    await state.update_data(workout_type="cardio")
    markup = await keyboards.get_cardio_exercises(pool)
    await message.answer("üèÉ –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=markup)
    await state.set_state(WorkoutForm.select_cardio_exercise)


@workout_router.message(WorkoutForm.select_cardio_exercise)
async def process_cardio_exercise(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    async with pool.acquire() as conn:
        exercise = await conn.fetchrow(
            "SELECT id FROM exercise_types WHERE name = $1 AND category = 'cardio'", message.text
        )

    if not exercise:
        await message.answer("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    await state.update_data(exercise_id=exercise["id"])
    await message.answer(
        "‚è± –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã):", reply_markup=keyboards.cancel_button()
    )
    await state.set_state(WorkoutForm.cardio_duration)


@workout_router.message(WorkoutForm.cardio_duration)
async def process_cardio_duration(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç!")
        return

    await state.update_data(duration=int(message.text))
    await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º):", reply_markup=keyboards.cancel_button())
    await state.set_state(WorkoutForm.cardio_distance)


@workout_router.message(WorkoutForm.cardio_distance)
async def process_cardio_distance(message: types.Message, state: FSMContext):
    try:
        distance = float(message.text.replace(",", "."))
        if distance <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ü—Ä–∏–º–µ—Ä: 5.3")
        return

    await state.update_data(distance=distance)
    await message.answer("üìà –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å:", reply_markup=keyboards.speed_keyboard())
    await state.set_state(WorkoutForm.cardio_avg_speed)


@workout_router.message(WorkoutForm.cardio_avg_speed)
async def process_cardio_speed(message: types.Message, state: FSMContext):
    try:
        speed = float(message.text.replace(",", "."))
        if speed < 0 or speed > 30:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ü—Ä–∏–º–µ—Ä: 9.5")
        return

    await state.update_data(avg_speed=speed)
    await message.answer("‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å:", reply_markup=keyboards.cancel_button())
    await state.set_state(WorkoutForm.cardio_heart_rate)


@workout_router.message(WorkoutForm.cardio_heart_rate)
async def process_cardio_heart_rate(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —É–¥–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É!")
        return

    await state.update_data(avg_heart_rate=int(message.text))
    await message.answer(
        "‚è≥ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–º–∏–Ω—É—Ç—ã):", reply_markup=keyboards.cancel_button()
    )
    await state.set_state(WorkoutForm.cardio_rest)


@workout_router.message(WorkoutForm.cardio_rest)
async def process_cardio_rest(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    data = await state.get_data()

    async with pool.acquire() as conn:
        async with conn.transaction():
            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await create_user(conn, message.from_user)

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            workout_id = await create_workout(conn, message.from_user.id, "cardio")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä–¥–∏–æ-—Å–µ—Å—Å–∏—é
            await create_cardio_session(
                conn,
                workout_id,
                data["exercise_id"],
                data["duration"],
                data["distance"],
                data["avg_speed"],
                data["avg_heart_rate"],
                int(message.text),
            )

    await message.answer("‚úÖ –ö–∞—Ä–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await state.clear()


# ------------------------------------
#    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# ------------------------------------


@workout_router.message(WorkoutForm.select_workout_type, F.text == "–°–∏–ª–æ–≤–∞—è")
async def select_strength_exercise(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    await state.update_data(workout_type="strength")
    markup = await keyboards.get_strength_exercises(pool)
    await message.answer("üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=markup)
    await state.set_state(WorkoutForm.select_strength_exercise)


@workout_router.message(WorkoutForm.select_strength_exercise)
async def process_strength_exercise(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    async with pool.acquire() as conn:
        exercise = await conn.fetchrow(
            "SELECT id FROM exercise_types WHERE name = $1 AND category = 'strength'", message.text
        )

    if not exercise:
        await message.answer("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    await state.update_data(exercise_id=exercise["id"])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:", reply_markup=keyboards.cancel_button())
    await state.set_state(WorkoutForm.strength_reps)


@workout_router.message(WorkoutForm.strength_reps)
async def process_strength_reps(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π!")
        return

    await state.update_data(reps=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–≤ –∫–≥):", reply_markup=keyboards.cancel_button())
    await state.set_state(WorkoutForm.strength_weight)


@workout_router.message(WorkoutForm.strength_weight)
async def process_strength_weight(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ —á–∏—Å–ª–æ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏!")
        return

    await state.update_data(weight=float(message.text))
    await message.answer(
        "‚è≥ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–º–∏–Ω—É—Ç—ã):", reply_markup=keyboards.cancel_button()
    )
    await state.set_state(WorkoutForm.strength_rest)


@workout_router.message(WorkoutForm.strength_rest)
async def process_strength_rest(message: types.Message, state: FSMContext, pool: asyncpg.Pool):
    data = await state.get_data()

    async with pool.acquire() as conn:
        async with conn.transaction():
            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await create_user(conn, message.from_user)

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            workout_id = await create_workout(conn, message.from_user.id, "strength")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–ª–æ–≤—É—é —Å–µ—Å—Å–∏—é
            await create_strength_session(
                conn,
                workout_id,
                data["exercise_id"],
                data["reps"],
                data["weight"],
                int(message.text),
            )

    await message.answer("‚úÖ –°–∏–ª–æ–≤–∞—è-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await state.clear()
